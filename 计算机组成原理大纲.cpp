// 1.1 冯.诺依曼计算机的特点
    硬件系统有由五大部件组成
    指令和数据以二进制形式存放在存储器中，并可按地址寻访
    指令在存储器中按顺序存放
    指令有操作码和地址码组成
    早起的冯·诺依曼机以运算器为中心
// 1.2 五大部件及每个部件在计算机中的作用；
    运算器      算数运算+逻辑运算+暂存中间结果
    存储器      存放数据和程序
    控制器      控制指挥程序和数据的输入，运行以及处理运算结果
    输入设备    
    输出设备
// 1.3 计算机性能公式，平均CPI计算；
    MAR位数反映存储单元的个数
    MDR位数=存储字长=每个存储单元的大小
    总容量 = 存储单元个数*存储字长 bit      1Byte = 8bit
          = 存储单元个数*存储字长/8Byte

    吞吐量和响应时间：每秒处理请求的数量
    主频和CPU时钟周期：每秒多少时钟周期
    CPI：每条指令所花费的时钟周期数
    CPU执行时间 = CPU时钟周期数/主频 = (指令条数*CPI)/主频
        PS: 2^15 = 32768    2^6 = 65536
        CPI--Clock Per Instruction

// 2.1 指令系统设计基本原理
    操作码OP 寻址特征R 形式地址A


    操作码+A1+A2+A3:   (A1)OP(A2)-->A3
    OP:操作性质，加减乘除
    A1:被操作数地址/源操作数地址
    A2:操作数地址/终点操作数地址
    A3:存放操作结果的地址

    二地址指令：
        存储器-存储器型指令(SS)
        寄存器-寄存器型指令(RR)
        寄存器-存储器型指令(RS)

    指令字长度   一个指令中包含二进制代码的位数
    机器字长    计算机能直接处理的二进制数据的位数，他决定了计算机的运算精度，通常与主存单元的位数相同
    单字长指令   指令字长度等于机器字长度的指令
    半字长指令   指令字长度等于半个机器字长度的指令




// 2.2 包括寄存器数量对指令格式的影响、寻址方式等；
                              取指+执行
    隐含寻址                    0次访存
    立即寻址                    1次访存
    直接寻址        EA=A        1+1=2
    间接寻址        EA=(A)      1+2=3
    寄存器寻址      EA=Ri       1+0=1
    寄存器间接寻址   EA=(Ri)     1+1=2
    基址寻址        EA=(BR)+A   以基址寄存器作为基准，偏移A
    变址寻址        EA=(IX)+A   以A为基准，便宜IX
    相对寻址        EA=(PC)+A   以PC为基准，偏移A   --PC指向转移指令后的一条指令


// 2.3 CISC与RISC的基本概念、特点及比较；
    Complex Instruction Set Computer   Reduced Instruction Set Computer
            CISC--复杂指令集(X86)          RISC--精简指令集(ARM,MIPS)
指令系统        复杂，庞大                      简单，精简
指令数目        >200                            <100
指令字长        不固定                            定长
可访存指令      不加限制                     只有Load/Store指令
各种指令执行时间 相差较大                    多数指令在一个时钟周期内完成
各种指令使用频度 相差很大                         都比较常用
通用寄存器数量     较少                             多
目标代码   难以用优化编译生成高效的目标代码     采用优化的编译程序，生成代码较为高效
控制方式    绝大多数为微指令控制               绝大多数为组合逻辑控制

// 3.1 计算机算术：二进制原码、反码、补码及相互转换；
    原码：
        小数：-(1-2^(-n)) <=x<=   1-2^(-n)
        整数：-(2^n-1)    <=x<=   2^n-1
    补码：
        小数：-1          <=x<=   1-2^(n-1)
        整数：-2^n        <=x<=   2^n-1

    反码：
        小数：-(1-2^(-n)) <=x<=   1-2^(-n)
        整数：-(2^n-1)    <=x<=   2^n-1
    相互转换：
        原码，反码
            正数相同
            负数符号为不变，数值部分按位取反
// 3.2 半加器、全加器结构；
// 3.3 补码二进制加减法运算运则推导过程及计算；
    
    符号为参与运算，符号为产生的进位丢掉(modM)
    定点小数时，模 M=2，定点整数时，模 M=2^(n+1)
    // 补码定点数加法运算      [A+B]补 =  [A]补+[B]补(mod M)
    // 补码定点数减法运算      [A-B]补 =  [A]补+[-B]补(mod M)


// 3.4 溢出判断；
    仅当两个符号相同的数相加或两个符号相异的数相减才可能产生溢出
    单符号位法      参与运算的两个数符号相同，但是结果与原符号不同，表示溢出
    双符号位法      
        运算结果的两个符号相同，表示未溢出
        运算结果的两个符号不同，表示溢出，最高位符号位代表真正的符号
    符号位和进位法
        若符号位与最高数位的进位相同，表示没有溢出，否则表示溢出
    PS：PSW
            OF  Overflow Flag    溢出标志       1--溢出
            SF  Sign Flag        符号标志       1--负
            ZF  Zero Flag        零标志         1--结果为0
            CF  Carry Flag       进位/借位标志   1--进位/借位
// 3.5 补码二进制加减法器结构；
// 3.6 浮点加减法运算步骤及流程；
    对阶        小->大；阶码小的尾数右移  --> 使两个数的阶码相等
    尾数求和     定点数加减运算规则计算
    规格化      左规和右规（右规最多一次）
    舍入
    溢出判断
        左规不会溢出
// 3.7 IEEE754浮点标准；
    数符 阶码 尾数


// 4.1 指令在处理器（CPU）中的执行过程；
// 4.2 典型指令在给定数据通路的CPU中的执行过程；
// 4.3 控制单元设计；

// 5.1 DRAM、SRAM的基本结构及特点、容量与地址线数量之间的关系；
    RAM和ROM均采用随机存取的方式对数据进行访问
    SRAM    非破坏性读出，不需要刷新。断电信息即丢失，属易失性存储器。存取速度快
            但集成度低，功耗性较大，常用于Cache/TLB
            存储元件：双稳态触发器，读出数据后触发器状态不会改变
    DRAM    破坏性读出，需要定期刷新。断电信息即丢失，属易失性存储器。集成度高，
            位价低，容量大，功耗性小。存取速度比SRAM慢，常用于大容量的主存系统
            电容：读出数据时电容放电，需要充电
    ROM     通常ROM只能读出，不能写入。信息永久保存，属于非易失性存储器。ROM和
            RAM可同作为主存的一部分，构成主存的地址域。ROM升级版：EPROM，EEPROM，Flash--随机存取
                EEPROM的演进--Electric Erase
                价格便宜，集成度高
                非易失性存储器
                能快速擦除，写入前必须先擦除，因此读比写要慢

// 5.2 DRAM的刷新；
    按行刷新
// 5.3 存储器带宽的概念及计算，提升存储器带宽的方法；
// 5.4 高速缓存（Cache）的基本原理、全相联/直接映射/组相联的特点及相应的查找流程
    直接映射    
        每个主存块只与一个缓存块相对应  i =  j mod C 或 j = j mod 2^C
        主存字块标记    Cache行号       块内标记
    全相联映射  
        主存中每一字块映射到Cache中的任意一块位置上
        主存字块标记    块内地址
    组相联映射--二路组相联-每组两个Cache行
        将Cache空间分成大小相同的组，主存的一个数据块可以装入一组内的任何一个位置，即组间直接映射，组内全相联
        主存字块标记    Cache组地址      字块内地址
// 5.5 Cache命中率/缺失率的计算
    设一个程序执行期间，Cache的总命中次数为Nc，访问主存的总次数为Nm，则命中率H为
        H = Nc / (Nc + Nm)      // 命中率=Cache命中次数/总命中次数
    设tc为命中时Cache访问时间，tm为未命中时的访问时间，则Cache-主存系统的平均访问时间Ta为   
        Ta = Ht + (1 - H)tm     // 平均访问时间=Cache访问时间+主存访问时间
    Cache系统的访问效率为
        e = tc / Ta             // 访问效率=Cache访问时间/平均访问时间

// 5.6 存储层次中平均访存延迟及计算；

// 补充：存储器扩展与芯片选择
    位扩展
    字扩展
    字位扩展
// 补充：存储器与CPU的连接
    1.ROM存放系统程序，RAM组成用户组
    2.地址线的连接
        CPU地址线低位与存储芯片的地址线相连，以选择芯片中的某一单元（字选）；CPU地址线的高位在扩充存储芯片时用以选择存储芯片（片选）
    3.数据线的连接
        比较CPU的数据线数与存储芯片线数，不相等时需要对存储芯片进行扩位，使其位数与CUO的数据线数相等
    4.读/写命令线的连接
    5.片选线的连接（片选法和译码片选法）
// 补充：低位交叉存储器
    1.每个模块都有相同的容量和存取速度
    2.每个模块都有杜立德读写控制电路，地址寄存器和数据寄存器
    3.地位地址为体号，高位地址为体内地址
    4.程序连续存放在相邻体中 
// 6.1 IO控制：程序查询、中断和DMA的特点及处理流程；
    程序查询方式：CPU一旦启动I/O，必须停止现行程序的运行，并用测试指令不断检测设备状态，直到设备已做好准备，CPU才能执行I/O指令进行数据传送。--CPU与I/O串行工作

/****************************************************************************/

1.解释中断系统中的“断点”和“现场”
    断点：即程序执行中断的地方，保存断点以便处理完中断继续执行该程序
    现场：当前所执行程序的CPU环境，即CPU内个寄存器内的信息
    中断向量：中断服务程序的入口地址
2.DRAM刷新的基本原理
    刷新的过程实质上是先将原存信息读出，再由刷新放大器形成原信息并重新写入的再生过程。可分为集中刷新，异步刷新，分散刷新
3.定点数
    小数点位置固定不变的计其数，小数点不再使用‘.’表示，而是约定他的位置
  浮点数
    以适当的形式将比例因子表示在数据中，让小数点的位置根据需要而浮动的机器数
(4).有效地址
    操作数所在的单元到段首的距离即逻辑地址的偏移地址
5.直接寻址
    指令字的形式地址A就是操作数的真实地址EA，即EA=A
6.存储单元
    一般应具有存储数据和读写数据的功能，以8位二进制作为一个存储单元，也就是一个字节。
7.计算机中是如何表示和处理数值数据的？
8.详细回答中断处理的全过程，并分析其优缺点。
    关中断->保存断点->引出中断服务程序->保存现场和屏蔽字->开中断->执行中断服务程序->关中断->回复现场和屏蔽字->开中断，中断返回
    优点：使处理器的利用率提高，且能支持多道程序和I/O设备并行操作
    缺点：
        各种I/O设备都通过中断处理方式进行并行操作
        如果I/O控制器的缓冲区比较小，在缓冲区装满数据之后将会发生中断。那么，在数据传送的过程中，发生中断的机会比较多，这将消耗大量的CPU处理时间
9.提高访存速度可以采取哪些措施
    采用高速器件
    采用层次结构Cache-主存
    双端口存储器
    多模块存储器
10.DMA数据传送方式的工作原理和优缺点
    停止CPU访问主存:CPU放弃地址线，数据线和有关控制线的使用权，DMA接口获得总线控制权
        优点：控制简单
        缺点：DMA接口在访问主存时，CPU基本上处于不工作状态或保持原状态
    DMA与CPU交替访存:
        优点：不需要总线使用权的申请，建立和归还过程，总线使用权是通过C1和C2分时控制的
        缺点：相应的硬件逻辑变得更为复杂
    周期挪用/周期窃取:
        优点：既实现了I/O传送，又较好的发挥了主存和CPU的效率
        缺点：可能需要复杂的时序电路，而且数据传输过程是不连续的和不规则的
11.浮点数加减法运算对阶的原因和基本原则
    目的：使两个操作数的小数点位置对齐，即使得两个数的阶码相等
    原则：先求解差，然后以小阶向大阶看齐的原则，将阶码小的尾数右移一位，阶码加1，直到两个数的阶码相等为止
12.指令周期，机器周期，时钟周期
    指令周期：CPU从主存中每取出并执行一条指令所需的全部时间
    机器周期：完成一个基本操作所需要的时间
    时钟周期：时钟频率的倒数
    关系：指令周期常常用若干个机器周期表示，一个机器周期又包含若干个时钟周期
13.指令：计算机执行某种操作的命令
   程序：使计算机执行一个完整的任务的指令的集合
   CPU控制程序的执行：实际上是对指令的执行，那么就是指令执行过程。计算机每执行一条指令都可以分为三个阶段：取指令，分析指令，执行指令。
   取指令：根据程序计数器PC中的值从程序存储器读出现行指令，送到指令寄存器
   分析指令阶段：将指令寄存器中的指令操作码取出后进行译码，分析其指令性质。如指令要求操作数，则寻找操作数地址
   计算机执行程序的过程实际上就是逐条指令的重复上述操作过程，直至遇到停机指令可循环等待指令
14.CPU如何识别程序和数据的？
   通常完成一条指令可分为取指阶段和执行阶段。在取指阶段通过访问存储器可将指令取出，在执行阶段通过访问存储器可以将操作数取出。
   因此虽然指令和数据都是以二进制代码形式存放在寄存器中，但CPU可以根据指令周期的不同阶段判断出从存储器取出的二进制代码是指令还是数据


图：
    组相联映射图
    CPU数据通路示意图
/****************************************************************************/


真题：
    2012年
        1.补码加减法的运算                        --计算
        2.浮点数加减法                             
        3.总线带宽的概念，影响因素和计算            --简答
        4.中断：断点，现场                     
        5.指令：微指令，微操作，微程序，指令，程序    
        6.DRAM刷新的原理                       
        7.校验码
    2013年
        1.定点数                                --名词解释
        2.总线复用                       
        3.有效地址                           
        4.直接寻址                             
        5.存储单元                            
        6.计算机如何表示和处理数据                 --简答
        7.中断过程，优缺点                      
        8.Cache                                --计算
    2015年
        1.二进制原码、反码、补码及相互转换
        2.微指令                                --名词解释
        3.直接寻址                          
        4.浮点数                              
        5.中断向量                              
        6.总线主设备                        
        7.提高访存速度的措施                      --简答
        8.DMA数据传送方式的工作原理和优缺点       
        9.浮点数加减法运算对阶的原因和基本原则       
        10.指令周期，机器周期，时钟周期             
        11.提高总线数据传输率                     --分析
    2016年
        1.寄存器名称和作用                        --选择
        2.总线的作用                             
        3.三种集中式总线控制
        4.SRAM，DRAM
        5.原码，补码，反码，移码和无符号数的作用
        6.编译程序，汇编程序。。。
        7.DMA方式周期-窃取
        8.原码，补码，反码，移码范围
        9.时间单位--指令周期>机器周期=CPU周期>时钟周期
        10.微程序的存放位置-控制存储器
        11.提高总线数据传输率                     --应用
        12.补码加减法的运算
        13.程序查询方式
        14.Cache命中率
        15.指令格式
    2016年
        


    2020年
        1.CPI
        2.计算
        3.指令系统计算
        4.DMA

    2021年：
        